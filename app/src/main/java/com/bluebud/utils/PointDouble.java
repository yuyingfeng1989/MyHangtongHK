package com.bluebud.utils;

import java.util.ArrayList;

public class PointDouble {
    double x;
    double y;


    private double chinaLineData[] = { 114.02626, 22.50686, 114.04995,
            22.50274, 114.05639, 22.50464, 114.05879, 22.51336, 114.06489,
            22.51677, 114.06978, 22.51764, 114.07295, 22.51907, 114.07956,
            22.53120, 114.08695, 22.53334, 114.08935, 22.53699, 114.09381,
            22.53651, 114.09690, 22.53405, 114.10420, 22.53524, 114.10849,
            22.53287, 114.10978, 22.53049, 114.11175, 22.52961, 114.11467,
            22.53065, 114.11604, 22.53199, 114.11638, 22.53398, 114.11999,
            22.53508, 114.12299, 22.53849, 114.12565, 22.53992, 114.12866,
            22.53992, 114.13029, 22.54190, 114.13407, 22.54170, 114.13733,
            22.54357, 114.14046, 22.54289, 114.14149, 22.54277, 114.14209,
            22.54202, 114.14287, 22.54219, 114.14419, 22.54212, 114.14441,
            22.54124, 114.14615, 22.54135, 114.14856, 22.54203, 114.14837,
            22.54372, 114.15052, 22.54641, 114.14958, 22.54754, 114.14969,
            22.55032, 114.15076, 22.55099, 114.15166, 22.55166, 114.15196,
            22.55460, 114.15557, 22.55481, 114.16093, 22.56096, 114.16222,
            22.56076, 114.16329, 22.55929, 114.16561, 22.55945, 114.16672,
            22.56068, 114.16750, 22.56119, 114.16904, 22.56108, 114.17046,
            22.55985, 114.17501, 22.55913, 114.17741, 22.55755, 114.17797,
            22.55565, 114.18089, 22.55513, 114.18346, 22.55543, 114.18674,
            22.55477, 114.18784, 22.55561, 114.18962, 22.55456, 114.19325,
            22.55541, 114.19578, 22.55586, 114.19672, 22.55705, 114.20101,
            22.55729, 114.20239, 22.55634, 114.21054, 22.55674, 114.21458,
            22.55452, 114.22033, 22.55253, 114.22445, 22.55047, 114.22606,
            22.54708, 114.22584, 22.54522, 114.22693, 22.54326, 114.22889,
            22.54235, 114.26004, 22.56143, 114.37986, 22.54812, 114.48080,
            22.42027, 115.30890, 21.35306, 125.20758, 28.81794, 124.15289,
            39.81042, 124.84503, 40.44045, 126.00958, 40.92366, 126.59185,
            41.52686, 126.93243, 41.78952, 127.30597, 41.48572, 128.11895,
            41.40337, 128.30572, 41.57619, 128.03106, 42.00214, 128.93194,
            42.05111, 129.87677, 42.95821, 130.49200, 42.57107, 131.17315,
            43.03856, 131.30499, 44.13667, 130.99737, 44.87318, 133.17266,
            45.07525, 134.75470, 48.32867, 132.33770, 47.74097, 130.97540,
            47.74097, 130.66778, 48.12374, 130.62384, 48.85187, 127.63556,
            49.82539, 126.66876, 51.82371, 125.61407, 53.00304, 123.50470,
            53.55482, 120.78009, 53.29295, 120.07696, 52.71116, 120.73614,
            52.33683, 119.28595, 50.52895, 119.24200, 50.10806, 117.87970,
            49.59806, 116.16583, 50.05166, 115.72638, 49.88205, 116.69317,
            49.85373, 115.59454, 48.03566, 117.35235, 47.65224, 118.45098,
            47.97685, 119.90118, 46.69635, 117.92364, 46.66620, 116.69317,
            46.33345, 115.81427, 45.56962, 113.70489, 44.82644, 111.85919,
            45.10627, 111.41973, 44.29415, 111.99102, 43.78873, 109.44220,
            42.47390, 107.35479, 42.44148, 105.00372, 41.60906, 104.49835,
            41.90410, 103.70733, 41.82228, 102.10333, 42.21406, 101.79571,
            42.52250, 100.36749, 42.68423, 99.46661, 42.57107, 97.20343,
            42.78107, 96.39044, 42.76494, 95.92901, 43.23098, 95.33575,
            44.27842, 93.51202, 44.95098, 91.31475, 45.10627, 90.65557,
            45.50806, 90.98516, 46.09017, 90.96319, 46.83181, 90.30401,
            47.66704, 88.83184, 48.10907, 87.71124, 48.89522, 87.82110,
            49.16894, 86.81036, 49.12582, 86.52472, 48.47454, 85.75567,
            48.41624, 85.49200, 48.07971, 85.62384, 47.08675, 84.98663,
            46.89190, 83.05304, 47.22123, 82.24005, 45.56962, 82.66851,
            45.33842, 82.44879, 45.16827, 81.65777, 45.33842, 79.92193,
            44.95098, 80.75689, 43.15088, 80.11969, 42.06742, 77.72467,
            41.06463, 76.82379, 41.03149, 76.47223, 40.39863, 74.89019,
            40.46553, 73.52789, 39.37017, 73.90142, 38.55008, 74.49469,
            38.48131, 74.70343, 38.30048, 75.10992, 37.45064, 74.75836,
            37.25851, 74.51666, 37.15351, 74.84625, 36.97818, 75.35162,
            36.92550, 77.46099, 35.52528, 78.05426, 35.41791, 78.55963,
            34.26378, 78.77935, 33.80857, 78.77935, 33.56175, 79.16388,
            33.09359, 79.28473, 32.65069, 79.08697, 32.41913, 78.92218,
            32.37275, 78.74640, 32.54888, 78.72442, 32.68768, 78.41681,
            32.55814, 78.55963, 32.19628, 78.76287, 31.95890, 78.70794,
            31.80030, 78.83429, 31.61805, 78.73541, 31.51040, 78.76837,
            31.34165, 78.86175, 31.30411, 79.09796, 31.45418, 79.49347,
            30.99384, 80.38336, 30.49339, 80.98761, 30.24695, 81.15240,
            29.99988, 81.38311, 30.24695, 81.41607, 30.40816, 81.93243,
            30.35129, 82.10821, 30.34181, 82.20709, 30.07597, 82.87725,
            29.69495, 83.25079, 29.54214, 83.58038, 29.17828, 84.07476,
            29.31249, 84.26153, 28.89011, 84.84381, 28.57220, 85.07452,
            28.68792, 85.18438, 28.62043, 85.11847, 28.35005, 85.34918,
            28.26300, 85.70074, 28.35972, 85.95343, 27.94320, 86.07428,
            27.91408, 86.16217, 28.14682, 86.26104, 27.98201, 86.38189,
            27.91408, 86.57965, 28.07899, 87.16192, 27.83638, 88.70001,
            28.06929, 88.87579, 27.90437, 88.77691, 27.50557, 88.85382,
            27.33979, 88.96368, 27.33979, 89.08453, 27.60297, 89.67779,
            28.18556, 90.13922, 28.35972, 90.40289, 28.25332, 90.35894,
            28.05960, 91.19390, 27.97231, 91.30377, 28.05960, 91.58941,
            27.81695, 91.68829, 27.49583, 92.02887, 27.42759, 92.03985,
            27.13466, 92.19366, 26.88016, 93.14947, 26.86056, 93.84161,
            26.99769, 94.29205, 27.55428, 95.21490, 27.89466, 95.54449,
            28.21461, 95.89605, 28.30170, 96.35748, 28.15650, 96.98370,
            27.85581, 97.15948, 27.82667, 97.34625, 27.93349, 97.32428,
            28.21461, 97.48907, 28.32104, 97.52203, 28.54325, 97.69781,
            28.51429, 98.06036, 28.19524, 98.31305, 27.54454, 98.63165,
            27.58350, 98.71954, 25.88614, 97.73077, 25.03308, 97.55499,
            23.95335, 98.38995, 24.21413, 98.93927, 23.20826, 99.51056,
            23.02638, 99.20294, 22.21510, 100.23565, 21.50135, 101.00470,
            21.74647, 101.26837, 21.21486, 101.75177, 21.25582, 101.55401,
            22.11336, 101.79571, 22.49959, 102.25714, 22.43868, 102.58673,
            22.76324, 102.91632, 22.47929, 103.42169, 22.76324, 105.31134,
            23.30919, 105.88263, 22.93536, 106.79449, 22.81389, 106.66265,
            22.55033, 106.57476, 22.37774, 106.72857, 22.00135, 106.99224,
            21.93003, 107.36578, 21.65460, 107.91510, 21.56267, 108.68414,
            20.90729, 108.21173, 18.80984, 108.85992, 17.83993, 110.72760,
            17.81902, 112.03497, 19.80519, 111.94708, 21.09191, 113.14459,
            21.59332, 113.48722, 21.98925, 113.56585, 22.07677, 113.55383,
            22.10477, 113.54799, 22.11431, 113.54937, 22.14484, 113.53838,
            22.15756, 113.52739, 22.17918, 113.52739, 22.18776, 113.53598,
            22.20398, 113.53396, 22.20894, 113.53289, 22.21224, 113.53486,
            22.21347, 113.53769, 22.21363, 113.54061, 22.21296, 113.54160,
            22.21371, 113.54263, 22.21605, 113.54349, 22.21685, 113.54542,
            22.21705, 113.54748, 22.21677, 113.54919, 22.21673, 113.55469,
            22.21800, 113.67871, 22.18848, 113.57434, 22.02180, 113.63065,
            21.84856, 113.82016, 21.87659, 113.83664, 21.94667, 113.82016,
            22.36131, 113.90256, 22.43241, 114.02626, 22.50686 };


    private ArrayList<PointDouble> pointsCN = new ArrayList<PointDouble>();

    private int count = 0 ;

    public boolean isInChina() {
        if (this.count == 0) {
            int len = this.chinaLineData.length;
            this.count = len / 2;
            for (int i = 0; i < this.count; i++) {
                PointDouble point = new PointDouble(this.chinaLineData[i * 2],this.chinaLineData[i * 2 + 1]);
                this.pointsCN.add(point);
            }
        }
        int MeetPointNum = 0;

        PointDouble tpt=  new PointDouble(x, y);

        ArrayList<PointDouble> m_featureArray = this.pointsCN;
        int featuresize = m_featureArray.size();
        for (int i = 1; i < featuresize; i++) {
            PointDouble pt1 = (PointDouble) m_featureArray
                    .get(i - 1);
            PointDouble pt2 = (PointDouble) m_featureArray.get(i);

            if (((tpt.y <= pt1.y && tpt.y >= pt2.y) || (tpt.y >= pt1.y && tpt.y <= pt2.y))
                    && (tpt.x >= pt1.x || tpt.x >= pt2.x)) {

                if (this.JudgePtInLine(pt1, pt2, tpt)) {
                    return true;
                }

                double temp = 0;

                temp = pt1.y - pt2.y;
                if (temp >= -0.0000000001 && temp <= 0.0000000001) {

                    double dxx = tpt.y - pt1.y;
                    if (dxx >= -0.0000000001 && dxx <= 0.0000000001) {
                        // int indexs[2] = {0,0};
                        int indexs[] = this.GetNotSame(m_featureArray, i);
                        PointDouble linePt1 = null;// HtPoint
                        PointDouble linePt2 = null;// HtPoint;
                        linePt1 = m_featureArray.get(indexs[0]);
                        linePt2 = m_featureArray.get(indexs[1]);
                        if (i > indexs[0]) {
                            break;
                        } else {
                            i = indexs[0] + 1;
                        }
                        if (tpt.x > pt1.x
                                && ((tpt.y >= linePt1.y && tpt.y <= linePt2.y) || (tpt.y >= linePt2.y && tpt.y <= linePt1.y)))
                            MeetPointNum++;
                    }
                } else {
                    double kk = 0;
                    double bb = 0;
                    double MeetPtY = 0;
                    double MeetPtX = 0;
                    kk = (pt1.x - pt2.x)
                            / (pt1.y - pt2.y);
                    bb = pt1.x - kk * pt1.y;
                    MeetPtY = kk * tpt.y + bb;
                    MeetPtX = tpt.y;
                    double dx = 0;
                    double dy = 0;
                    double dx2 = 0;
                    double dy2 = 0;
                    dx = MeetPtX - pt1.y;
                    dy = MeetPtY - pt1.x;
                    dx2 = MeetPtX - pt2.y;
                    dy2 = MeetPtY - pt2.x;
                    if ((dx >= -0.0000000001 && dx <= 0.0000000001
                            && dy >= -0.0000000001 && dy <= 0.0000000001)) {
                        PointDouble pt3 = null;// HtPoint;
                        if (i == 1) {
                            pt3 = m_featureArray.get(m_featureArray.size() - 2);// HtPoint;
                        } else {
                            pt3 = m_featureArray.get(i - 2);// HtPoint;
                            // //(TabPoint)part.poins->GetAt(i-2);
                        }
                        if (tpt.x > MeetPtY
                                && ((MeetPtX >= pt3.y && MeetPtX <= pt2.y) || (MeetPtX >= pt2.y && MeetPtX <= pt3.y)))
                            MeetPointNum++;
                    } else if (!(dx2 >= -0.0000000001 && dx2 <= 0.0000000001
                            && dy2 >= -0.0000000001 && dy2 <= 0.0000000001)) {
                        if (tpt.x > MeetPtY)
                            MeetPointNum++;
                    }
                }
            }

        }
        return (MeetPointNum % 2 == 1);
    }

    public boolean JudgePtInLine(PointDouble tpt1,
                                 PointDouble tpt2, PointDouble tpt) {

        double dx1 = this.GetDistance(tpt1, tpt2);
        double dx2 = this.GetDistance(tpt, tpt1);
        double dx3 = this.GetDistance(tpt, tpt2);
        double dx = dx3 + dx2 - dx1;

        if (dx >= -0.0000000001 && dx <= 0.0000000001) {
            return true;
        }
        return false;
    }

    public double GetDistance(PointDouble tpt1, PointDouble tpt2) {

        double x = tpt1.y - tpt2.x;
        if (x <= 0) {
            x = -x;
        }
        double y = tpt1.x - tpt2.x;
        if (y <= 0) {
            y = -y;
        }
        return Math.sqrt(x * x + y * y);
    }

    public int[] GetNotSame(ArrayList<PointDouble> poins, int index) {

        int indexs[] = {};
        indexs[0] = indexs[1] = -1;
        int size = poins.size();
        PointDouble buftpt = null;// HtPoint
        PointDouble tpt = null;// HtPoint
        tpt = poins.get(index);

        for (int i = index; i < size; i++) {
            buftpt = poins.get(i);
            if (buftpt.y != tpt.y) {
                indexs[0] = i;
                break;
            }
        }

        if (indexs[0] == -1) {
            for (int j = 0; j < size; j++) {
                buftpt = poins.get(j);
                if (buftpt.y != tpt.y) {
                    indexs[0] = j;
                    break;
                }
            }
        }

        for (int k = index; k >= 0; k--) {
            buftpt = poins.get(k);
            if (buftpt.y != tpt.y) {
                indexs[1] = k;
                break;
            }
        }
        if (indexs[1] == -1) {
            for (int l = size - 1; l >= 0; l--) {
                buftpt = poins.get(l);
                if (buftpt.y != tpt.y) {
                    indexs[1] = l;
                    break;
                }
            }
        }

        if (indexs[0] == -1 || indexs[1] == -1) {
        }
        return indexs;
    }

    public PointDouble(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public String toString() {
        return "x=" + x + ", y=" + y;
    }



    public double getX() {
        return x;
    }

    public void setX(double x) {
        this.x = x;
    }

    public double getY() {
        return y;
    }

    public void setY(double y) {
        this.y = y;
    }



}
